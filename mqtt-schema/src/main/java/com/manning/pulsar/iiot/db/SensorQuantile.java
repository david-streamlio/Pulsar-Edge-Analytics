/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.manning.pulsar.iiot.db;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SensorQuantile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1257048465143933952L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorQuantile\",\"namespace\":\"com.manning.pulsar.iiot.db\",\"fields\":[{\"name\":\"sensor_id\",\"type\":\"int\"},{\"name\":\"signal_id\",\"type\":\"string\"},{\"name\":\"interval_start\",\"type\":\"long\"},{\"name\":\"interval_end\",\"type\":\"long\"},{\"name\":\"min\",\"type\":\"double\"},{\"name\":\"max\",\"type\":\"double\"},{\"name\":\"retained_items\",\"type\":\"long\"},{\"name\":\"quantile\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SensorQuantile> ENCODER =
      new BinaryMessageEncoder<SensorQuantile>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorQuantile> DECODER =
      new BinaryMessageDecoder<SensorQuantile>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SensorQuantile> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SensorQuantile> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SensorQuantile> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SensorQuantile>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SensorQuantile to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SensorQuantile from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SensorQuantile instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SensorQuantile fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int sensor_id;
  @Deprecated public java.lang.CharSequence signal_id;
  @Deprecated public long interval_start;
  @Deprecated public long interval_end;
  @Deprecated public double min;
  @Deprecated public double max;
  @Deprecated public long retained_items;
  @Deprecated public java.nio.ByteBuffer quantile;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorQuantile() {}

  /**
   * All-args constructor.
   * @param sensor_id The new value for sensor_id
   * @param signal_id The new value for signal_id
   * @param interval_start The new value for interval_start
   * @param interval_end The new value for interval_end
   * @param min The new value for min
   * @param max The new value for max
   * @param retained_items The new value for retained_items
   * @param quantile The new value for quantile
   */
  public SensorQuantile(java.lang.Integer sensor_id, java.lang.CharSequence signal_id, java.lang.Long interval_start, java.lang.Long interval_end, java.lang.Double min, java.lang.Double max, java.lang.Long retained_items, java.nio.ByteBuffer quantile) {
    this.sensor_id = sensor_id;
    this.signal_id = signal_id;
    this.interval_start = interval_start;
    this.interval_end = interval_end;
    this.min = min;
    this.max = max;
    this.retained_items = retained_items;
    this.quantile = quantile;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sensor_id;
    case 1: return signal_id;
    case 2: return interval_start;
    case 3: return interval_end;
    case 4: return min;
    case 5: return max;
    case 6: return retained_items;
    case 7: return quantile;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sensor_id = (java.lang.Integer)value$; break;
    case 1: signal_id = (java.lang.CharSequence)value$; break;
    case 2: interval_start = (java.lang.Long)value$; break;
    case 3: interval_end = (java.lang.Long)value$; break;
    case 4: min = (java.lang.Double)value$; break;
    case 5: max = (java.lang.Double)value$; break;
    case 6: retained_items = (java.lang.Long)value$; break;
    case 7: quantile = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sensor_id' field.
   * @return The value of the 'sensor_id' field.
   */
  public int getSensorId() {
    return sensor_id;
  }


  /**
   * Sets the value of the 'sensor_id' field.
   * @param value the value to set.
   */
  public void setSensorId(int value) {
    this.sensor_id = value;
  }

  /**
   * Gets the value of the 'signal_id' field.
   * @return The value of the 'signal_id' field.
   */
  public java.lang.CharSequence getSignalId() {
    return signal_id;
  }


  /**
   * Sets the value of the 'signal_id' field.
   * @param value the value to set.
   */
  public void setSignalId(java.lang.CharSequence value) {
    this.signal_id = value;
  }

  /**
   * Gets the value of the 'interval_start' field.
   * @return The value of the 'interval_start' field.
   */
  public long getIntervalStart() {
    return interval_start;
  }


  /**
   * Sets the value of the 'interval_start' field.
   * @param value the value to set.
   */
  public void setIntervalStart(long value) {
    this.interval_start = value;
  }

  /**
   * Gets the value of the 'interval_end' field.
   * @return The value of the 'interval_end' field.
   */
  public long getIntervalEnd() {
    return interval_end;
  }


  /**
   * Sets the value of the 'interval_end' field.
   * @param value the value to set.
   */
  public void setIntervalEnd(long value) {
    this.interval_end = value;
  }

  /**
   * Gets the value of the 'min' field.
   * @return The value of the 'min' field.
   */
  public double getMin() {
    return min;
  }


  /**
   * Sets the value of the 'min' field.
   * @param value the value to set.
   */
  public void setMin(double value) {
    this.min = value;
  }

  /**
   * Gets the value of the 'max' field.
   * @return The value of the 'max' field.
   */
  public double getMax() {
    return max;
  }


  /**
   * Sets the value of the 'max' field.
   * @param value the value to set.
   */
  public void setMax(double value) {
    this.max = value;
  }

  /**
   * Gets the value of the 'retained_items' field.
   * @return The value of the 'retained_items' field.
   */
  public long getRetainedItems() {
    return retained_items;
  }


  /**
   * Sets the value of the 'retained_items' field.
   * @param value the value to set.
   */
  public void setRetainedItems(long value) {
    this.retained_items = value;
  }

  /**
   * Gets the value of the 'quantile' field.
   * @return The value of the 'quantile' field.
   */
  public java.nio.ByteBuffer getQuantile() {
    return quantile;
  }


  /**
   * Sets the value of the 'quantile' field.
   * @param value the value to set.
   */
  public void setQuantile(java.nio.ByteBuffer value) {
    this.quantile = value;
  }

  /**
   * Creates a new SensorQuantile RecordBuilder.
   * @return A new SensorQuantile RecordBuilder
   */
  public static com.manning.pulsar.iiot.db.SensorQuantile.Builder newBuilder() {
    return new com.manning.pulsar.iiot.db.SensorQuantile.Builder();
  }

  /**
   * Creates a new SensorQuantile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorQuantile RecordBuilder
   */
  public static com.manning.pulsar.iiot.db.SensorQuantile.Builder newBuilder(com.manning.pulsar.iiot.db.SensorQuantile.Builder other) {
    if (other == null) {
      return new com.manning.pulsar.iiot.db.SensorQuantile.Builder();
    } else {
      return new com.manning.pulsar.iiot.db.SensorQuantile.Builder(other);
    }
  }

  /**
   * Creates a new SensorQuantile RecordBuilder by copying an existing SensorQuantile instance.
   * @param other The existing instance to copy.
   * @return A new SensorQuantile RecordBuilder
   */
  public static com.manning.pulsar.iiot.db.SensorQuantile.Builder newBuilder(com.manning.pulsar.iiot.db.SensorQuantile other) {
    if (other == null) {
      return new com.manning.pulsar.iiot.db.SensorQuantile.Builder();
    } else {
      return new com.manning.pulsar.iiot.db.SensorQuantile.Builder(other);
    }
  }

  /**
   * RecordBuilder for SensorQuantile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorQuantile>
    implements org.apache.avro.data.RecordBuilder<SensorQuantile> {

    private int sensor_id;
    private java.lang.CharSequence signal_id;
    private long interval_start;
    private long interval_end;
    private double min;
    private double max;
    private long retained_items;
    private java.nio.ByteBuffer quantile;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.manning.pulsar.iiot.db.SensorQuantile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sensor_id)) {
        this.sensor_id = data().deepCopy(fields()[0].schema(), other.sensor_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.signal_id)) {
        this.signal_id = data().deepCopy(fields()[1].schema(), other.signal_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.interval_start)) {
        this.interval_start = data().deepCopy(fields()[2].schema(), other.interval_start);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.interval_end)) {
        this.interval_end = data().deepCopy(fields()[3].schema(), other.interval_end);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.min)) {
        this.min = data().deepCopy(fields()[4].schema(), other.min);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.max)) {
        this.max = data().deepCopy(fields()[5].schema(), other.max);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.retained_items)) {
        this.retained_items = data().deepCopy(fields()[6].schema(), other.retained_items);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.quantile)) {
        this.quantile = data().deepCopy(fields()[7].schema(), other.quantile);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing SensorQuantile instance
     * @param other The existing instance to copy.
     */
    private Builder(com.manning.pulsar.iiot.db.SensorQuantile other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sensor_id)) {
        this.sensor_id = data().deepCopy(fields()[0].schema(), other.sensor_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.signal_id)) {
        this.signal_id = data().deepCopy(fields()[1].schema(), other.signal_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interval_start)) {
        this.interval_start = data().deepCopy(fields()[2].schema(), other.interval_start);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.interval_end)) {
        this.interval_end = data().deepCopy(fields()[3].schema(), other.interval_end);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.min)) {
        this.min = data().deepCopy(fields()[4].schema(), other.min);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.max)) {
        this.max = data().deepCopy(fields()[5].schema(), other.max);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.retained_items)) {
        this.retained_items = data().deepCopy(fields()[6].schema(), other.retained_items);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.quantile)) {
        this.quantile = data().deepCopy(fields()[7].schema(), other.quantile);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'sensor_id' field.
      * @return The value.
      */
    public int getSensorId() {
      return sensor_id;
    }


    /**
      * Sets the value of the 'sensor_id' field.
      * @param value The value of 'sensor_id'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setSensorId(int value) {
      validate(fields()[0], value);
      this.sensor_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sensor_id' field has been set.
      * @return True if the 'sensor_id' field has been set, false otherwise.
      */
    public boolean hasSensorId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sensor_id' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearSensorId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'signal_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getSignalId() {
      return signal_id;
    }


    /**
      * Sets the value of the 'signal_id' field.
      * @param value The value of 'signal_id'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setSignalId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.signal_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'signal_id' field has been set.
      * @return True if the 'signal_id' field has been set, false otherwise.
      */
    public boolean hasSignalId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'signal_id' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearSignalId() {
      signal_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'interval_start' field.
      * @return The value.
      */
    public long getIntervalStart() {
      return interval_start;
    }


    /**
      * Sets the value of the 'interval_start' field.
      * @param value The value of 'interval_start'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setIntervalStart(long value) {
      validate(fields()[2], value);
      this.interval_start = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'interval_start' field has been set.
      * @return True if the 'interval_start' field has been set, false otherwise.
      */
    public boolean hasIntervalStart() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'interval_start' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearIntervalStart() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'interval_end' field.
      * @return The value.
      */
    public long getIntervalEnd() {
      return interval_end;
    }


    /**
      * Sets the value of the 'interval_end' field.
      * @param value The value of 'interval_end'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setIntervalEnd(long value) {
      validate(fields()[3], value);
      this.interval_end = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'interval_end' field has been set.
      * @return True if the 'interval_end' field has been set, false otherwise.
      */
    public boolean hasIntervalEnd() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'interval_end' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearIntervalEnd() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'min' field.
      * @return The value.
      */
    public double getMin() {
      return min;
    }


    /**
      * Sets the value of the 'min' field.
      * @param value The value of 'min'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setMin(double value) {
      validate(fields()[4], value);
      this.min = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'min' field has been set.
      * @return True if the 'min' field has been set, false otherwise.
      */
    public boolean hasMin() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'min' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearMin() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'max' field.
      * @return The value.
      */
    public double getMax() {
      return max;
    }


    /**
      * Sets the value of the 'max' field.
      * @param value The value of 'max'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setMax(double value) {
      validate(fields()[5], value);
      this.max = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'max' field has been set.
      * @return True if the 'max' field has been set, false otherwise.
      */
    public boolean hasMax() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'max' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearMax() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'retained_items' field.
      * @return The value.
      */
    public long getRetainedItems() {
      return retained_items;
    }


    /**
      * Sets the value of the 'retained_items' field.
      * @param value The value of 'retained_items'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setRetainedItems(long value) {
      validate(fields()[6], value);
      this.retained_items = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'retained_items' field has been set.
      * @return True if the 'retained_items' field has been set, false otherwise.
      */
    public boolean hasRetainedItems() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'retained_items' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearRetainedItems() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantile' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getQuantile() {
      return quantile;
    }


    /**
      * Sets the value of the 'quantile' field.
      * @param value The value of 'quantile'.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder setQuantile(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.quantile = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'quantile' field has been set.
      * @return True if the 'quantile' field has been set, false otherwise.
      */
    public boolean hasQuantile() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'quantile' field.
      * @return This builder.
      */
    public com.manning.pulsar.iiot.db.SensorQuantile.Builder clearQuantile() {
      quantile = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorQuantile build() {
      try {
        SensorQuantile record = new SensorQuantile();
        record.sensor_id = fieldSetFlags()[0] ? this.sensor_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.signal_id = fieldSetFlags()[1] ? this.signal_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.interval_start = fieldSetFlags()[2] ? this.interval_start : (java.lang.Long) defaultValue(fields()[2]);
        record.interval_end = fieldSetFlags()[3] ? this.interval_end : (java.lang.Long) defaultValue(fields()[3]);
        record.min = fieldSetFlags()[4] ? this.min : (java.lang.Double) defaultValue(fields()[4]);
        record.max = fieldSetFlags()[5] ? this.max : (java.lang.Double) defaultValue(fields()[5]);
        record.retained_items = fieldSetFlags()[6] ? this.retained_items : (java.lang.Long) defaultValue(fields()[6]);
        record.quantile = fieldSetFlags()[7] ? this.quantile : (java.nio.ByteBuffer) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorQuantile>
    WRITER$ = (org.apache.avro.io.DatumWriter<SensorQuantile>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorQuantile>
    READER$ = (org.apache.avro.io.DatumReader<SensorQuantile>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.sensor_id);

    out.writeString(this.signal_id);

    out.writeLong(this.interval_start);

    out.writeLong(this.interval_end);

    out.writeDouble(this.min);

    out.writeDouble(this.max);

    out.writeLong(this.retained_items);

    out.writeBytes(this.quantile);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sensor_id = in.readInt();

      this.signal_id = in.readString(this.signal_id instanceof Utf8 ? (Utf8)this.signal_id : null);

      this.interval_start = in.readLong();

      this.interval_end = in.readLong();

      this.min = in.readDouble();

      this.max = in.readDouble();

      this.retained_items = in.readLong();

      this.quantile = in.readBytes(this.quantile);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sensor_id = in.readInt();
          break;

        case 1:
          this.signal_id = in.readString(this.signal_id instanceof Utf8 ? (Utf8)this.signal_id : null);
          break;

        case 2:
          this.interval_start = in.readLong();
          break;

        case 3:
          this.interval_end = in.readLong();
          break;

        case 4:
          this.min = in.readDouble();
          break;

        case 5:
          this.max = in.readDouble();
          break;

        case 6:
          this.retained_items = in.readLong();
          break;

        case 7:
          this.quantile = in.readBytes(this.quantile);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










